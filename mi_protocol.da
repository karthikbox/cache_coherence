import sys
import time

ENOTSUPP = 2
CACHE_SIZE = 512

def get_proto_class(name):
  if name == "MI":
    return (eval("MI_PROTO_CACHE"), eval("MI_PROTO_CTRL"))
  else:
    exit(-ENOTSUPP)

## Exemplary implementation of PROTOCOL Classes
"""
  MI Protocol class:
"""
class MI_PROTO_CACHE(process):
  def setup(mem_ctrl_protocol_obj, other_protocol_obj, size):
    self.memory = []
    self.get_from_caches = False
    self.wait_for_caches = False
    self.wait_for_memory = False
    self.get_from_memory = False
    self.not_found_q = []
    self.pending_actions = []
    
  def run():
    await(False)

  def reorder(addr, value):
    """ Check if the addr is present in the list """
    found = False
    for (state, address, val) in self.memory:
      if state == 1 and address == addr:
        found = True
        if value == "":
          value = val
        self.memory.remove((1, addr, val))
        break
    
    if not found:
      """ Check if the cache is full """
      if len(self.memory) == size:
        print("Cache is full")
        (state, last_addr, value) = self.memory.pop()
        if state == 1:
          send(('flush', last_addr, value), to=mem_ctrl_protocol_obj)
    
    self.memory.insert(0, (1, addr, value))
    return value

  """ Address not in cache, snoop other caches or get from memory """
  def get_addr(addr):
    wait_for_caches = False;
    print(addr)
    send(('get', addr), to=other_protocol_obj)
    await(wait_for_caches)
    if not get_from_caches:
      wait_for_memory = False
      send(('get', addr), to=mem_ctrl_protocol_obj)
      await(wait_for_memory)
      if get_from_memory:
        send(('invalidate', addr), to=other_protocol_obj)
    else:
      ## Receive data from cache/memory, invalidate all other copies
      send(('invalidate', addr), to=other_protocol_obj)
    get_from_caches = False

  def receive(msg= ('get',addr), from_= p):
    """ Add time delay here to mimic cache-to-cache latency """
    #time.sleep(1)
    print("Cache request for address: ", addr)
    print(self.memory)
    found = False
    value = ""
    for i in range(len(self.memory)):
      ## invalidate cache block
      if self.memory[i][0] == 1 and self.memory[i][1] == addr:
        self.memory[i] = (0, addr, self.memory[i][2]) 
        found = True
        value = self.memory[i][2]
        break
    if found:
      send(('found_in_cache', addr, value), to=p)
    else:
      send(('not_found_in_cache', addr), to=p)

  def receive(msg= ('invalidate', addr), from_= p):
    """ invalidate cache block """
    for i in range(len(self.memory)):
      """ invalidate cache block """
      if self.memory[i][0] == 1 and self.memory[i][1] == addr:
        self.memory[i] = (0, addr, self.memory[i][2])
        break

  def receive(msg=('found_in_cache', addr, value)):
    print("Addr:", addr, "received from another cache with value:", value)
    for i in range(len(self.memory)):
      """ invalidate cache block """
      if self.memory[i][0] == 0 and self.memory[i][1] == addr:
        self.memory[i] = (1, addr, value)
        #self.memory[i] = value
        break
    get_from_caches = True
    wait_for_caches = True

  def receive(msg=('get_from_cache', addr)):
    wait_for_memory = True
    get_addr(addr)

  def receive(msg=('not_found_in_cache', addr)):
    self.not_found_q.append("recvd_not_found")
    #if len(setof(a, received(('not_found_in_cache'), from_ =a))) == len(other_protocol_obj):
    if len(self.not_found_q) == len(other_protocol_obj):
      print("Addr", addr, "not found in the other caches")
      wait_for_caches = True 

  def receive(msg=('found_in_memory', addr, value)):
    print("Addr:", addr, "received from another cache with value:", value)
    for i in range(len(self.memory)):
      """ invalidate cache block """
      if self.memory[i][0] == 0 and self.memory[i][1] == addr:
        #self.memory[i][0] = 1
        #self.memory[i][2] = value
        self.memory[i] = (1, addr, value)
        break
    get_from_memory = True
    wait_for_memory = True

  def receive(msg=('not_found_in_memory')):
    print("Addr not found in memory")
    wait_for_memory = True

  def receive(msg=('load', addr), from_=s):
    print("Received LOAD request for addr %s" % addr);
    found = False
    value = ""
    for val in self.memory:
      # Cache miss logic
      if val[0] == 1 and val[1] == addr:
        found = True
        break
    if not found:
      get_addr(addr)
    value = self.reorder(addr, '')
    self.not_found_q.clear()
    print("Sending Ack")
    send(('completed_load', value), to=s)
  
  def receive(msg=('store', addr, value), from_=s):
    print("Received STORE request for addr %s" % addr);
    found = False
    for val in self.memory:
      # Cache miss logic
      if val[0] == 1 and val[1] == addr:
        found = True
        break
    if not found:
      get_addr(addr)
    #value = self.reorder(addr, va)
    self.reorder(addr, value)
    self.not_found_q.clear()
    print("Sending Ack")
    send('completed_store', to=s)
  
  def receive(msg= ('done',)):
    print("Cache Exiting\n")
    exit()

class MI_PROTO_CTRL(process):
  def setup(cache_protocol_objs):
    self.memory_ref = dict()
    self.memory_value = dict()
  
  def run():
    await(False)
  
  def receive(msg=('msg')):
    print("recevied msg\n")

  def receive(msg= ('get',addr), from_= p):
    """ Add time delay here to mimic cache-to-memory latency """
    #time.sleep(3)
    if addr in self.memory_ref and self.memory_ref[addr] > 0:
      send(('get_from_cache', addr), to=p)
    else:
      self.memory_ref[addr] = 1
      if addr not in self.memory_value:
        self.memory_value[addr] = 0
      send(('found_in_memory', addr, self.memory_value[addr]), to=p)

  def receive(msg= ('flush', addr, value)):
    self.memory_ref[addr] = 0

  def receive(msg= ('done',)):
    print("CTRL Exiting\n")
    exit()

class Processor(process):
    def setup(trace, protocol):
      self.keep_waiting = False
      ## self.cache = Cache(protocol, CACHE_SIZE)
    
    def execute(inst):
      type, addr, value = inst
      if type == "r":
        send(('load', addr), to=protocol)
     
      elif type == "w":
        send(('store', addr, value), to=protocol)
      
      else:
        print("Unexpected instruction:", inst);
    
    def run():
      for inst in trace:
        keep_waiting = False
        execute(inst)
        await(keep_waiting)

      print("Processor Exits")

    def receive(msg= ('completed_load', value)):
      print("ACKed load\n")
      keep_waiting = True

    def receive(msg= ('completed_store')):
      print("ACKed store\n")
      keep_waiting = True

def get_traces(trace_file):
  return [
          [
           ('r', '0x11111111', 0),
           ('w', '0x11111111', 3),
           ('w', '0x11111113', 10)
          ],

          [
           ('r', '0x11111114', 0),
           ('r', '0x11111117', 0),
           ('r', '0x11111111', 0)
          ],
          """
          [
           ('r', '0x11111117'),
           ('r', '0x11111114'),
           ('w', '0x11111118')
          ],

          [
           ('r', '0x11111112'),
           ('w', '0x11111116'),
           ('r', '0x11111113')
          ]
          """
         ]

def main():
    nprocessors = int(sys.argv[1]) if len(sys.argv) > 1 else 2
    proto_name = sys.argv[2] if len(sys.argv) > 2 else 'MI'
    #trace_file = sys.argv[3] if len(sys.argv) > 3 else exit(-1)
    trace_file = sys.argv[3] if len(sys.argv) > 3 else 'none'

    config(channel= 'fifo', clock= 'Lamport')
    
    trace = get_traces(trace_file)
    Proto_cache, Proto_ctrl = get_proto_class(proto_name)
    
    ## Initialize protocol objs for caches and controller
    mem_ctrl_protocol_obj = new(Proto_ctrl, num=1)
    protocol_objs = new(Proto_cache, num=nprocessors)
    
    ## Setup Protocol for ctrller
    setup(mem_ctrl_protocol_obj, (protocol_objs,))
    start(mem_ctrl_protocol_obj)

    ## Setup Protocols for caches
    for proto_obj in protocol_objs:
      setup(proto_obj, (mem_ctrl_protocol_obj, protocol_objs - {proto_obj}, CACHE_SIZE))
      start(proto_obj)

    ## Setup Processors
    processors = new(Processor, num= nprocessors)
    
    ## temp lists for iterating
    processors_list = list(processors)
    protocol_objs_list = list(protocol_objs)
    for i in range(nprocessors): 
      setup(processors_list[i], (trace[i], protocol_objs_list[i]))
    
    start(processors)
    
    ## Exiting logic  
    for p in processors: 
      p.join()

    da.send(('done',), to= protocol_objs)
    for m in protocol_objs:
      m.join()

    da.send(('done',), to= mem_ctrl_protocol_obj)
    for m in mem_ctrl_protocol_obj:
      m.join()
    print('-----END-----')

